<style>
    body {
        background-color: #212529;
        color: white;
    }
</style>

<div class="container-fluid w-75 p-5 d-flex justify-content-center align-items-center" style="height: 90vh;">
    <form class="w-50" id="enterOTPForm">
        <div class="mb-3">
            <label for="otpPassword" class="form-label">otpPassword</label>
            <input type="number" name="otpPassword" class="form-control" id="otpPassword">
        </div>
        <button type="submit" class="btn btn-primary w-100">Submit</button>
    </form>
</div>

<script>
    document.getElementById("enterOTPForm").addEventListener("submit", async (event) => {
    event.preventDefault();
    
    const code = document.getElementById("otpPassword").value;
    
    try {
        const findUserResponse = await fetch(`http://127.0.0.1:8080/api/v1/users/${localStorage.getItem("userOneTimeId")}`);
        const findUserData = await findUserResponse.json();
        localStorage.removeItem("userOneTimeId")
      
        const verifyText = findUserData.data.otp.at(-1).verifyText;
   
        
    
        const response = await fetch(`http://127.0.0.1:8080/api/v1/auth/verify-otp`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ code, verifyText })
        });
        const data = await response.json();
    
        if (data.token) {
            localStorage.setItem("jwtToken", data.token);
            localStorage.setItem("userId", data.userId);
            localStorage.setItem("userRole", data.role);
            
            switch (data.role) {
                case "user":
                    window.location.href = "http://127.0.0.1:8080/homes";
                    break;
                case "owner":
                    window.location.href = "http://127.0.0.1:8080/owner";
                    break;
                default:
                    window.location.href = "http://127.0.0.1:8080/404";
                    break;
            }
        } else {
            handleErrors(data);
        }
    } catch (error) {
        console.error("Error:", error);
        Swal.fire({
            icon: "error",
            title: "Internal Server Error",
            text: "Something went wrong. Please try again later."
        });
    }
});

const handleErrors = (data) => {
    let errorMessage = "Internal server error"
    switch (data.name) {
        case "Conflict Exception":
            errorMessage = data.message;
            break;
        case "Conflict Exception":
            errorMessage = data.message;
            break;
        default:
            errorMessage = "Uncown error"
    }
    
    Swal.fire({
        icon: "error",
        title: "Error",
        text: errorMessage
    });
};

</script>